import React from 'react';
import classnames from 'classnames';
import Events from '../utils/events';
import Mask from '../mask';
import PropsType from './PropsType';

export interface PortalProps extends PropsType {
  prefixCls?: string;
  className?: string;
}
export default class Portal extends React.Component<PortalProps, any> {
  static defaultProps = {
    prefixCls: 'za-popup',
    visible: false,
    mask: true,
    direction: 'bottom',
    autoClose: false,
    stayTime: 3000,
    animationDuration: 200,
    maskType: Mask.defaultProps.type,
  };
  private timer: number;
  private popup;

  constructor(props) {
    super(props);
    this.state = {
      isShow: false,
      isMaskShow: false,
      isPending: false,
      animationState: 'enter',
    };
  }

  componentWillReceiveProps(nextProps) {
    if (nextProps.visible !== this.props.visible) {
      this.setState({
        isShow: nextProps.visible,
      }, () => {
        if (nextProps.visible === true) {
          this.enter();
        } else {
          this.leave();
        }
      });
    }
  }

  componentDidMount() {
    if (this.props.visible) {
      setTimeout(() => {
        this.enter();
      });
    }
    Events.on(this.popup, 'webkitTransitionEnd', this.animationEnd);
    Events.on(this.popup, 'transitionend', this.animationEnd);
  }

  componentWillUnmount() {
    Events.off(this.popup, 'webkitTransitionEnd', this.animationEnd);
    Events.off(this.popup, 'transitionend', this.animationEnd);
  }

  enter = () => {
    const { stayTime, autoClose, onMaskClick } = this.props;
    this.setState({
      isShow: true,
      isMaskShow: true,
      isPending: true,
      animationState: 'enter',
    });

    if (stayTime as number > 0 && autoClose) {
      this.timer = setTimeout(() => {
        if (typeof onMaskClick === 'function') {
          onMaskClick();
        }
        clearTimeout(this.timer);
      }, stayTime);
    }
  }

  leave = () => {
    this.setState({
      isShow: false,
      isPending: true,
      animationState: 'leave',
    });
  }

  animationEnd = e => {
    // 防止其他的样式转换触发该事件，如border、background-image
    if (!/transform/i.test(e.propertyName)) {
      return;
    }

    const { onClose, onOpen, willUnMount } = this.props;
    const { animationState } = this.state;

    if (animationState === 'leave') {
      this.setState({
        isMaskShow: false,
      });
      if (typeof onClose === 'function') {
        onClose();
      }
      if (typeof willUnMount === 'function') {
        willUnMount();
      }
    } else {
      if (typeof onOpen === 'function') {
        onOpen();
      }
    }
  }

  renderMask = () => {
    const { mask, maskType, onMaskClick, animationDuration } = this.props;
    const { isPending, animationState, isMaskShow } = this.state;

    const maskCls = classnames({
      [`fade-${animationState}`]: isPending,
    });

    const maskStyle = {
      WebkitAnimationDuration: `${animationDuration}ms`,
      animationDuration: `${animationDuration}ms`,
    };

    return (
      mask && (
        <Mask
          className={maskCls}
          style={maskStyle}
          visible={isMaskShow}
          type={maskType}
          onClick={onMaskClick}
        />
      )
    );
  }

  render() {
    const {
      prefixCls,
      className,
      animationDuration,
      direction,
      children,
    } = this.props;
    const { isShow } = this.state;

    const popupCls = classnames(`${prefixCls}`, className, {
      [`${prefixCls}-hidden`]: !isShow,
    });
    const wrapCls = classnames(
      `${prefixCls}-wrapper`,
      `${prefixCls}-wrapper-${direction}`,
    );

    const wrapStyle = {
      WebkitTransitionDuration: `${animationDuration}ms`,
      transitionDuration: `${animationDuration}ms`,
    };

    return (
      <div
        className={popupCls}
        ref={popup => { this.popup = popup; }}
      >
        <div className={wrapCls} style={wrapStyle}>
          {children}
        </div>
        {this.renderMask()}
      </div>
    );
  }
}

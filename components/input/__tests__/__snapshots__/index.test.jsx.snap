// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input renders correctly 1`] = `
<div
  class="za-input za-input-text clearable"
>
  <input
    autocomplete="off"
    type="text"
  />
</div>
`;

exports[`Input renders onClear called correctly 1`] = `
<Input
  clearable={true}
  onClear={
    [MockFunction] {
      "calls": Array [
        Array [
          "My new value",
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  type="text"
  value=""
>
  <InputBase
    clearable={true}
    disabled={false}
    onClear={
      [MockFunction] {
        "calls": Array [
          Array [
            "My new value",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    prefixCls="za-input"
    type="text"
    value=""
  >
    <div
      className="za-input za-input-text clearable"
    >
      <input
        autoComplete="off"
        disabled={false}
        onBlur={[Function]}
        onChange={[Function]}
        onCompositionEnd={[Function]}
        onCompositionStart={[Function]}
        onCompositionUpdate={[Function]}
        onFocus={[Function]}
        type="text"
        value=""
      />
      <Icon
        className="za-input-clear"
        onClick={[Function]}
        prefixCls="za-icon"
        type="wrong-round-fill"
      >
        <i
          className="za-icon za-input-clear za-icon-wrong-round-fill"
          onClick={[Function]}
        />
      </Icon>
    </div>
  </InputBase>
</Input>
`;

exports[`Input showLength 1`] = `
<div
  class="za-input za-input-textarea"
>
  <textarea
    maxlength="100"
    rows="4"
  />
  <div
    class="za-input-length"
  >
    0/100
  </div>
</div>
`;

exports[`Input.Idcard renders correctly 1`] = `
<Input
  type="idcard"
>
  <InputNumber
    clearable={true}
    disabled={false}
    prefixCls="za-input"
    type="idcard"
  >
    <div
      className="za-input za-input-number clearable"
      onClick={[Function]}
    >
      <div
        className="za-input-placeholder"
      />
      <div
        className="za-input-content"
      />
      <input
        disabled={false}
        type="hidden"
        value=""
      />
      <KeyboardPicker
        onKeyClick={[Function]}
        prefixCls="za-keyboard"
        type="idcard"
        visible={false}
      >
        <Popup
          mask={false}
          visible={false}
        />
      </KeyboardPicker>
      <Icon
        className="za-input-clear"
        onClick={[Function]}
        prefixCls="za-icon"
        type="wrong-round-fill"
      >
        <i
          className="za-icon za-input-clear za-icon-wrong-round-fill"
          onClick={[Function]}
        />
      </Icon>
    </div>
  </InputNumber>
</Input>
`;

exports[`Input.Number renders correctly 1`] = `
<Input
  type="number"
>
  <InputNumber
    clearable={true}
    disabled={false}
    prefixCls="za-input"
    type="number"
  >
    <div
      className="za-input za-input-number clearable"
      onClick={[Function]}
    >
      <div
        className="za-input-placeholder"
      />
      <div
        className="za-input-content"
      />
      <input
        disabled={false}
        type="hidden"
        value=""
      />
      <KeyboardPicker
        onKeyClick={[Function]}
        prefixCls="za-keyboard"
        type="number"
        visible={false}
      >
        <Popup
          mask={false}
          visible={false}
        />
      </KeyboardPicker>
      <Icon
        className="za-input-clear"
        onClick={[Function]}
        prefixCls="za-icon"
        type="wrong-round-fill"
      >
        <i
          className="za-icon za-input-clear za-icon-wrong-round-fill"
          onClick={[Function]}
        />
      </Icon>
    </div>
  </InputNumber>
</Input>
`;

exports[`Input.Number renders onClear called correctly 1`] = `
<Input
  onClear={
    [MockFunction] {
      "calls": Array [
        Array [
          "",
        ],
      ],
      "results": Array [
        Object {
          "isThrow": false,
          "value": undefined,
        },
      ],
    }
  }
  type="number"
>
  <InputNumber
    clearable={true}
    disabled={false}
    onClear={
      [MockFunction] {
        "calls": Array [
          Array [
            "",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    prefixCls="za-input"
    type="number"
  >
    <div
      className="za-input za-input-number focus clearable"
      onClick={[Function]}
    >
      <div
        className="za-input-placeholder"
      />
      <div
        className="za-input-content"
      />
      <input
        disabled={false}
        type="hidden"
        value=""
      />
      <KeyboardPicker
        onKeyClick={[Function]}
        prefixCls="za-keyboard"
        type="number"
        visible={true}
      >
        <Popup
          mask={false}
          visible={true}
        />
      </KeyboardPicker>
      <Icon
        className="za-input-clear"
        onClick={[Function]}
        prefixCls="za-icon"
        type="wrong-round-fill"
      >
        <i
          className="za-icon za-input-clear za-icon-wrong-round-fill"
          onClick={[Function]}
        />
      </Icon>
    </div>
  </InputNumber>
</Input>
`;

exports[`Input.Price renders correctly 1`] = `
<Input
  type="price"
>
  <InputNumber
    clearable={true}
    disabled={false}
    prefixCls="za-input"
    type="price"
  >
    <div
      className="za-input za-input-number clearable"
      onClick={[Function]}
    >
      <div
        className="za-input-placeholder"
      />
      <div
        className="za-input-content"
      />
      <input
        disabled={false}
        type="hidden"
        value=""
      />
      <KeyboardPicker
        onKeyClick={[Function]}
        prefixCls="za-keyboard"
        type="price"
        visible={false}
      >
        <Popup
          mask={false}
          visible={false}
        />
      </KeyboardPicker>
      <Icon
        className="za-input-clear"
        onClick={[Function]}
        prefixCls="za-icon"
        type="wrong-round-fill"
      >
        <i
          className="za-icon za-input-clear za-icon-wrong-round-fill"
          onClick={[Function]}
        />
      </Icon>
    </div>
  </InputNumber>
</Input>
`;

exports[`Input.Textarea autoHeight 1`] = `
<Input
  autoHeight={true}
  onChange={[MockFunction]}
  rows={4}
  type="textarea"
  value="foo"
>
  <InputTextarea
    autoHeight={true}
    disabled={false}
    focused={false}
    onChange={[MockFunction]}
    prefixCls="za-input"
    rows={4}
    showLength={false}
    value="foo"
  >
    <div
      className="za-input za-input-textarea"
    >
      <textarea
        disabled={false}
        onBlur={[Function]}
        onChange={[Function]}
        onCompositionEnd={[Function]}
        onCompositionStart={[Function]}
        onCompositionUpdate={[Function]}
        onFocus={[Function]}
        rows={4}
        value="foo"
      />
    </div>
  </InputTextarea>
</Input>
`;

exports[`Input.Textarea renders correctly 1`] = `
<div
  class="za-input za-input-textarea"
>
  <textarea
    rows="4"
  />
</div>
`;

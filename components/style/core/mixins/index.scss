@mixin b($block) {
  $B: $namespace + '-' + $block !global;

  .#{$B} {
    @content;
  }
}

@mixin e($elements...) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $elements {
    $currentSelector: #{$currentSelector + '.' + $B + $element-separator + $unit + ','};
  }
  $currentSelectorAll: str-slice($currentSelector, 0, str-length($currentSelector) - 1);

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelectorAll} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelectorAll} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector + & + $modifier-separator + $unit + ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}

@mixin when($state) {
  @at-root {
    &.#{$B + $state-prefix + $state} {
      @content;
    }
  }
}

@mixin onepx($positions: top right bottom left, $border-color: $border-color, $border-radius: 0) {
  &:after {
    content: '';
    pointer-events: none;
    position: absolute;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    border-radius: $border-radius;
    @each $position in $positions {
      border-#{$position}: 1px solid $border-color;
    }

    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 2dppx) {
      width: 200%;
      height: 200%;
      transform: scale(0.5);
      transform-origin: 0 0;
      border-radius: $border-radius * 2;
    }
  }
}

$--namespace: 'za';
$--element-separator: '__';
$--modifier-separator: '--';
$--state-prefix: '--';

// 反向查找
@function str-reverse($string) {
  $result: "";
  @for $i from str-length($string) through 1 {
    $result: $result + str-slice($string, $i, $i);
  }
  @return $result;
}

// 是否包含Modifier
@function containsModifier($selector) {
  $selector: selectorToString($selector);
  @if str-index($selector, $--modifier-separator) {
    @return true;
  } @else {
    @return false;
  }
}

// 是否包含Element
@function containsElement($selector) {
  $selector: selectorToString($selector);
  @if str-index($selector, $--element-separator) {
    @return true;
  } @else {
    @return false;
  }
}

// 选择器转字符串
@function selectorToString($selector) {
  $selector: inspect($selector); //cast to string
  $selector: str-slice($selector, 2, -2); //remove brackets
  @return $selector;
}

// 获取块名
@function getBlock($selector) {
  $selector: selectorToString($selector);
  $parent: str-slice($selector, str-length($selector) - str-index(str-reverse($selector), '.') + 1);
  $start: -2;

  @if containsElement($parent) {
    $start: str-index($parent, $--element-separator) - 1;
  } @else if containsModifier($parent) {
    $start: str-index($parent, $--modifier-separator) - 1;
  }
  @return str-slice($parent, 0, $start);
}

// 获取节点列表
@function getElements($elements) {
  $selector: &;
  $currentSelector: '';
  @if containsModifier($selector) {
    $selector: getBlock($selector);
  }
  @each $unit in $elements {
    @if containsElement($selector) {
      $block: getBlock($selector);
      $currentSelector: #{$currentSelector + $selector} #{$block + $--element-separator + $unit + ','};
    } @else {
      $currentSelector: #{$currentSelector + $selector + $--element-separator + $unit + ','};
    }
  }
  @return $currentSelector;
}

@mixin b($block) {
  .#{$--namespace + '-' + $block} {
    @content;
  }
}

@mixin e($element...) {
  $selector: &;
  $elements: getElements($element);
  @if containsModifier($selector) {
    @at-root {
      #{$selector} {
        #{$elements} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$elements} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  @if containsModifier($selector) {
    $selector: getBlock($selector);
    @at-root {
      #{&}#{$selector + $--modifier-separator + $modifier} {
        @content;
      }
    }
  } @else {
    @at-root {
      #{$selector + $--modifier-separator + $modifier} {
        @content;
      }
    }
  }
}
(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{383:function(n,e,t){"use strict";t.r(e);var l=t(3),a=t.n(l),o=t(4),c=t.n(o),i=t(2),s=t.n(i),r=t(5),d=t.n(r),u=t(395),v=(t(697),function(n){function e(){var n,l,o,i;c()(this,e);for(var r=arguments.length,d=Array(r),u=0;u<r;u++)d[u]=arguments[u];return l=o=s()(this,(n=e.__proto__||a()(e)).call.apply(n,[this].concat(d))),o.document=function(){return{document:t(431),className:"picker-page"}},i=l,s()(o,i)}return d()(e,n),e}(u.a));e.default=v},395:function(n,e,t){"use strict";var l=t(396),a=t.n(l),o=t(397),c=t.n(o),i=t(398),s=t.n(i),r=t(3),d=t.n(r),u=t(4),v=t.n(u),m=t(6),b=t.n(m),h=t(2),g=t.n(h),p=t(5),S=t.n(p),k=t(0),A=t.n(k),C=t(42),f=t.n(C),D=t(399),y=t.n(D),T=t(400),_=t.n(T),M=(t(401),function(n){function e(n){v()(this,e);var t=g()(this,(e.__proto__||d()(e)).call(this,n));return t.nodeList=[],t.components=new s.a,t}return S()(e,n),b()(e,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){this.renderDOM()}},{key:"componentWillUnmount",value:function(){this.nodeList.forEach(function(n){f.a.unmountComponentAtNode(n)})}},{key:"renderDOM",value:function(){var n=!0,e=!1,t=void 0;try{for(var l,o=a()(this.components);!(n=(l=o.next()).done);n=!0){var i=l.value,s=c()(i,2),r=s[0],d=s[1],u=document.getElementById(r);this.nodeList.push(u),u instanceof HTMLElement&&f.a.render(d,u)}}catch(n){e=!0,t=n}finally{try{!n&&o.return&&o.return()}finally{if(e)throw t}}}},{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){this.components.clear();var l=new y.a.Renderer;l.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"};var a=y()(e,{renderer:l,highlight:function(n){return _.a.highlightAuto(n).value}});return A.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:a}})}return A.a.createElement("span",null)}}]),e}(A.a.Component));e.a=M},431:function(n,e){n.exports="## 选择器 Picker & Select\n\n\n\n### 基本用法\n```jsx\nimport { Cell, Button, Picker, Toast } from 'zarm';\n\nconst SINGLE_DATA = [\n  { value: '1', label: '选项一' },\n  { value: '2', label: '选项二' },\n];\n\n// 普通多列数据\nconst MULTI_DATA = [\n  [\n    { value: '1', label: '选项一' },\n    { value: '2', label: '选项二' },\n  ],\n  [\n    { value: '3', label: '选项A' },\n    { value: '4', label: '选项B' },\n  ],\n];\n\n// 级联数据\nconst CASCADE_DATA = [\n  {\n    code: '1',\n    label: '北京市',\n    children: [\n      { code: '11', label: '海淀区' },\n      { code: '12', label: '西城区' },\n    ],\n  },\n  {\n    code: '2',\n    label: '上海市',\n    children: [\n      { code: '21', label: '杨浦区' },\n      { code: '22', label: '静安区' },\n    ],\n  },\n];\n\nconst DIY_DATA = [\n  {\n    value: '1',\n    name: '北京市',\n    children: [\n      { value: '11', name: '海淀区' },\n      { value: '12', name: '西城区' },\n    ],\n  },\n  {\n    value: '2',\n    name: '上海市',\n    children: [\n      { value: '21', name: '黄埔区' },\n      { value: '22', name: '虹口区' },\n    ],\n  },\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      single: {\n        visible: false,\n        value: '',\n        dataSource: SINGLE_DATA,\n      },\n      multi: {\n        visible: false,\n        value: [],\n        dataSource: MULTI_DATA,\n      },\n      cascade: {\n        visible: false,\n        value: [],\n        dataSource: [],\n      },\n      diy: {\n        visible: false,\n        value: [],\n        dataSource: DIY_DATA,\n      },\n    };\n  }\n\n  componentDidMount() {\n    // 异步加载数据源测试\n    setTimeout(() => {\n      const { cascade } = this.state;\n\n      cascade.dataSource = CASCADE_DATA;\n      cascade.value = ['1', '12'];\n      cascade.valueMember = \"code\";\n      this.setState({ cascade });\n    }, 0);\n  }\n\n  toggle(key) {\n    const state = this.state[key];\n    state.visible = !state.visible;\n    this.setState({ [`${key}`]: state });\n  }\n\n  render() {\n    const {\n      single,\n      multi,\n      cascade,\n      diy,\n    } = this.state;\n\n    return (\n      <div>\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.toggle('single')}>选择</Button>\n          }\n        >\n          单列\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.toggle('multi')}>选择</Button>\n          }\n        >\n          多列\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.toggle('cascade')}>选择</Button>\n          }\n        >\n          级联\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.toggle('diy')}>选择</Button>\n          }\n        >\n          自定义\n        </Cell>\n\n        <Picker\n          visible={single.visible}\n          value={single.value}\n          dataSource={single.dataSource}\n          onOk={(selected) => {\n            console.log('Picker onOk: ', selected);\n            single.value = selected.map(item => item.value);\n            this.setState({ single });\n            Toast.show(JSON.stringify(selected));\n            this.toggle('single');\n          }}\n          onCancel={() => this.toggle('single')}\n        />\n\n        <Picker\n          visible={multi.visible}\n          value={multi.value}\n          dataSource={multi.dataSource}\n          onOk={(selected) => {\n            console.log('Picker onOk: ', selected);\n            multi.value = selected.map(item => item.value);\n            this.setState({ multi });\n            Toast.show(JSON.stringify(selected));\n            this.toggle('multi');\n          }}\n          onCancel={() => this.toggle('multi')}\n        />\n\n        <Picker\n          visible={cascade.visible}\n          value={cascade.value}\n          dataSource={cascade.dataSource}\n          valueMember={cascade.valueMember}\n          onOk={(selected) => {\n            console.log('Picker onOk: ', selected);\n            cascade.value = selected.map(item => item.code);\n            this.setState({ cascade });\n            Toast.show(JSON.stringify(selected));\n            this.toggle('cascade');\n          }}\n          onCancel={() => this.toggle('cascade')}\n        />\n\n        <Picker\n          visible={diy.visible}\n          title=\"custom title\"\n          cancelText=\"Cancel\"\n          okText=\"Ok\"\n          dataSource={diy.dataSource}\n          value={diy.value}\n          valueMember=\"value\"\n          itemRender={data => data.name}\n          onOk={(selected) => {\n            console.log('Picker onOk: ', selected);\n            diy.value = selected.map(item => item.value);\n            this.setState({\n              diy,\n            });\n            Toast.show(JSON.stringify(selected));\n            this.toggle('diy');\n          }}\n          onCancel={() => this.toggle('diy')}\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 表单选择 Select\n```jsx\nimport { Select, Cell } from 'zarm';\n\n// 级联数据\nconst CASCADE_DATA = [\n  {\n    value: '1',\n    label: '北京市',\n    children: [\n      { value: '11', label: '海淀区' },\n      { value: '12', label: '西城区' },\n    ],\n  },\n  {\n    value: '2',\n    label: '上海市',\n    children: [\n      { value: '21', label: '杨浦区' },\n      { value: '22', label: '静安区' },\n    ],\n  },\n];\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n      this.state = {\n        visible: false,\n        value: [],\n        dataSource: CASCADE_DATA,\n      };\n  }\n\n  componentDidMount() {\n    // 异步加载数据源测试\n    setTimeout(() => {\n      this.setState({\n        dataSource: CASCADE_DATA,\n        value: ['1', '12'],\n      });\n    }, 0);\n  }\n\n  render() {\n    const { visible, visible2, value, dataSource } = this.state;\n    return (\n      <div>\n        <Cell title=\"城市\">\n          <Select\n            visible={visible}\n            placeholder=\"请选择省市区\"\n            value={value}\n            dataSource={dataSource}\n            onOk={(selected) => {\n              console.log('Select onOk: ', selected);\n              this.setState({\n                value: selected.map(item => item.value),\n              });\n            }}\n          />\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 平铺选择 PickerView\n```jsx\nimport { PickerView } from 'zarm';\n\n// 级联数据\nconst CASCADE_DATA = [\n  {\n    code: '1',\n    label: '北京市',\n    children: [\n      { code: '11', label: '海淀区' },\n      { code: '12', label: '西城区' },\n    ],\n  },\n  {\n    code: '2',\n    label: '上海市',\n    children: [\n      { code: '21', label: '杨浦区' },\n      { code: '22', label: '静安区' },\n    ],\n  },\n];\n\nclass Demo extends React.Component {\n    constructor(props) {\n    super(props);\n    this.state = {\n      value: [],\n      dataSource: CASCADE_DATA,\n    };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        value: ['1', '12'],\n        dataSource: [\n          {\n            code: '1',\n            label: '北京市',\n            children: [\n              { code: '11', label: '海淀区' },\n              { code: '12', label: '西城区' },\n            ],\n          },\n          {\n            code: '2',\n            label: '上海市',\n            children: [\n              { code: '21', label: '杨浦区' },\n              { code: '22', label: '静安区' },\n            ],\n          },\n        ],\n        valueMember: 'code'\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <PickerView\n          value={this.state.value}\n          valueMember=\"code\"\n          dataSource={this.state.dataSource}\n          onChange={selected => console.log('PickerView onChange: ', selected)}\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### API\n\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-picker | | 类名前缀 |\n| className | string | | | 追加类名 |\n| dataSource | object[] | [ ] | | 数据源 |\n| value | string &#124; string[] &#124; number[] |  | | 值 |\n| defaultValue | string &#124; string[] &#124; number[] |  | | 初始值 |\n| valueMember | string | 'value' | | 值字段对应的key \n| itemRender | func | <code>(data?: object) => data.label</code> | | 单个选项的展示 |\n| disabled | boolean | false | | 是否禁用 |\n| cols | number | | | 级联选择器的级数 |\n| onChange | <code>(selected?: object) => void</code> | noop | \\(selected: object\\) | 值变化时触发的回调函数 |\n\n#### 仅 Picker & Select 支持的属性\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| visible | boolean | false | | 是否展示 |\n| title | string | '请选择' | | 选择器标题 |\n| okText | string | '确定' | | 确定栏文字 |\n| cancelText | string | '取消' | | 取消栏文字 |\n| onOk | <code>(selected?: object) => void</code> | noop | \\(selected: object\\) | 点击确定时触发的回调函数 |\n| onCancel | <code>() => void</code> | noop | | 点击取消时触发的回调函数 |\n| onMaskClick | <code>() => void</code> | noop | | 点击遮罩层时触发的回调函数 |\n\n#### 仅 Select 支持的属性\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| placeholder | string | '请选择' | | 输入提示信息 |\n| displayRender | <code>(selected?: object) => string</code> | noop | \\(selected: object\\) | 所选值的展示 |\n"},697:function(n,e,t){}}]);
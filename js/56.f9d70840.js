(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{380:function(n,e,o){"use strict";o.r(e);var t=o(3),l=o.n(t),a=o(4),i=o.n(a),s=o(2),d=o.n(s),r=o(5),m=o.n(r),c=function(n){function e(){var n,t,a,s;i()(this,e);for(var r=arguments.length,m=Array(r),c=0;c<r;c++)m[c]=arguments[c];return t=a=d()(this,(n=e.__proto__||l()(e)).call.apply(n,[this].concat(m))),a.document=function(){return{document:o(428),className:"modal-page"}},s=t,d()(a,s)}return m()(e,n),e}(o(395).a);e.default=c},395:function(n,e,o){"use strict";var t=o(396),l=o.n(t),a=o(397),i=o.n(a),s=o(398),d=o.n(s),r=o(3),m=o.n(r),c=o(4),u=o.n(c),p=o(6),h=o.n(p),v=o(2),f=o.n(v),y=o(5),C=o.n(y),M=o(0),k=o.n(M),b=o(42),g=o.n(b),B=o(399),w=o.n(B),D=o(400),x=o.n(D),z=(o(401),function(n){function e(n){u()(this,e);var o=f()(this,(e.__proto__||m()(e)).call(this,n));return o.nodeList=[],o.components=new d.a,o}return C()(e,n),h()(e,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){this.renderDOM()}},{key:"componentWillUnmount",value:function(){this.nodeList.forEach(function(n){g.a.unmountComponentAtNode(n)})}},{key:"renderDOM",value:function(){var n=!0,e=!1,o=void 0;try{for(var t,a=l()(this.components);!(n=(t=a.next()).done);n=!0){var s=t.value,d=i()(s,2),r=d[0],m=d[1],c=document.getElementById(r);this.nodeList.push(c),c instanceof HTMLElement&&g.a.render(m,c)}}catch(n){e=!0,o=n}finally{try{!n&&a.return&&a.return()}finally{if(e)throw o}}}},{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,o=n.className;if("string"==typeof e){this.components.clear();var t=new w.a.Renderer;t.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"};var l=w()(e,{renderer:t,highlight:function(n){return x.a.highlightAuto(n).value}});return k.a.createElement("div",{className:o,dangerouslySetInnerHTML:{__html:l}})}return k.a.createElement("span",null)}}]),e}(k.a.Component));e.a=z},428:function(n,e){n.exports="## 模态框 Modal\n\n\n\n### 基本用法\n```jsx\nimport { Modal, Cell, Button, Select } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modal1: false,\n      modal2: false,\n      modal3: false,\n      modal4: false,\n      modal5: false,\n      animationType: 'fade',\n    };\n  }\n\n  open(key) {\n    this.setState({\n      [`${key}`]: true,\n    });\n  }\n\n  close(key) {\n    this.setState({\n      [`${key}`]: false,\n    });\n  }\n\n  render() {\n    const { modal1, modal2, modal3, modal4, modal5, animationType } = this.state;\n    return (\n      <div>\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('modal1')}>开启</Button>\n          }\n        >\n          普通\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('modal3')}>开启</Button>\n          }\n        >\n          圆角\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('modal2')}>开启</Button>\n          }\n        >\n          遮罩层可关闭\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.open('modal4')}>开启</Button>\n          }\n        >\n          无头部\n        </Cell>\n\n        <Cell\n          title=\"动画效果\"\n          description={\n            <div>\n              <Button size=\"xs\" onClick={() => this.open('modal5')}>开启</Button>\n            </div>\n          }\n        >\n          <Select\n            value={animationType}\n            dataSource={[\n              { value: 'fade', label: '淡出淡入效果(fade)' },\n              { value: 'zoom', label: '缩放效果(zoom)' },\n              { value: 'rotate', label: '旋转效果(rotate)' },\n              { value: 'door', label: '开关门效果(door)' },\n              { value: 'flip', label: '翻转效果(flip)' },\n              { value: 'moveUp', label: '移出移入效果(moveUp)' },\n              { value: 'moveDown', label: '移出移入效果(moveDown)' },\n              { value: 'moveLeft', label: '移出移入效果(moveLeft)' },\n              { value: 'moveRight', label: '移出移入效果(moveRight)' },\n              { value: 'slideUp', label: '滑出滑入效果(slideUp)' },\n              { value: 'slideDown', label: '滑出滑入效果(slideDown)' },\n              { value: 'slideLeft', label: '滑出滑入效果(slideLeft)' },\n              { value: 'slideRight', label: '滑出滑入效果(slideRight)' },\n            ]}\n            onOk={(selected) => {\n              this.setState({\n                animationType: selected.map(item => item.value),\n              });\n            }}\n          />\n        </Cell>\n\n        <Modal visible={modal1}>\n          <Modal.Header title=\"标题\" onClose={() => this.close('modal1')} />\n          <Modal.Body>模态框内容</Modal.Body>\n        </Modal>\n\n        <Modal visible={modal2} onMaskClick={() => this.close('modal2')}>\n          <Modal.Header title=\"标题\" />\n          <Modal.Body>点击遮罩层关闭</Modal.Body>\n        </Modal>\n\n        <Modal shape=\"radius\" visible={modal3}>\n          <Modal.Header title=\"标题\" onClose={() => this.close('modal3')} />\n          <Modal.Body>模态框内容</Modal.Body>\n        </Modal>\n\n        <Modal visible={modal4} onMaskClick={() => this.close('modal4')}>\n          <Modal.Body>无头部</Modal.Body>\n        </Modal>\n\n        <Modal visible={modal5} animationType={animationType} onMaskClick={() => this.close('modal5')}>\n          <Modal.Body>\n            <div style={{ height: 100 }}>当前使用的动画类型animationType：'{animationType}'</div>\n          </Modal.Body>\n        </Modal>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 特定场景\n```jsx\nimport { Cell, Button, Alert, Confirm  } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      alert: false,\n      confirm: false,\n    };\n  }\n\n  open(key) {\n    this.setState({\n      [`${key}`]: true,\n    });\n  }\n\n  close(key) {\n    this.setState({\n      [`${key}`]: false,\n    });\n  }\n\n  render() {\n    const { alert, confirm } = this.state;\n    return (\n      <div>\n        <Cell\n          description={\n            <Button size=\"xs\" theme=\"warning\" onClick={() => this.open('alert')}>开启</Button>\n          }\n        >\n          警告框 Alert\n        </Cell>\n\n        <Cell\n          description={\n            <Button size=\"xs\" theme=\"warning\" onClick={() => this.open('confirm')}>开启</Button>\n          }\n        >\n          确认框 Confirm\n        </Cell>\n\n        <Alert\n          shape=\"radius\"\n          visible={alert}\n          title=\"警告\"\n          message=\"这里是警告信息\"\n          onCancel={() => this.close('alert')}\n        />\n\n        <Confirm\n          shape=\"radius\"\n          visible={confirm}\n          title=\"确认信息\"\n          message=\"你确定要这样做吗？\"\n          onOk={() => alert('click ok')}\n          onCancel={() => this.close('confirm')}\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### API\n\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-modal | | 类名前缀 |\n| className | string | 无 | | 追加类名 |\n| shape | string | 无 | `radius` | 形状 |\n| visible | boolean | false | | 是否显示 |\n| animationType | string | `fade` | `fade`, `door`, `flip`, `rotate`, `zoom`,`moveUp`, `moveDown`, `moveLeft`, `moveRight`,`slideUp`, `slideDown`, `slideLeft`, `slideRight` | 动画效果 |\n| animationDuration | number | 200 | | 动画执行时间 |\n| width | string &#124; number | `70%` | | 宽度 |\n| onMaskClick | <code>() => void</code> | noop | | 点击遮罩层时触发的回调函数 |\n"}}]);
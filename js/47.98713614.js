(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{379:function(n,e,o){"use strict";o.r(e);var t=o(3),c=o.n(t),r=o(4),l=o.n(r),a=o(2),u=o.n(a),b=o(5),h=o.n(b),C=o(403),i=(o(688),function(n){function e(){var n,t,r,a;l()(this,e);for(var b=arguments.length,h=Array(b),C=0;C<b;C++)h[C]=arguments[C];return t=r=u()(this,(n=e.__proto__||c()(e)).call.apply(n,[this].concat(h))),r.document=function(){return{document:o(425),className:"checkbox-page"}},a=t,u()(r,a)}return h()(e,n),e}(C.a));e.default=i},403:function(n,e,o){"use strict";var t=o(239),c=o.n(t),r=o(240),l=o.n(r),a=o(404),u=o.n(a),b=o(3),h=o.n(b),C=o(4),i=o.n(C),d=o(6),s=o.n(d),k=o(2),x=o.n(k),p=o(5),m=o.n(p),v=o(0),f=o.n(v),g=o(42),y=o.n(g),D=o(405),G=o.n(D),N=o(406),M=o.n(N),R=(o(407),function(n){function e(n){i()(this,e);var o=x()(this,(e.__proto__||h()(e)).call(this,n));return o.nodeList=[],o.components=new u.a,o}return m()(e,n),s()(e,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){this.renderDOM()}},{key:"componentWillUnmount",value:function(){this.nodeList.forEach(function(n){y.a.unmountComponentAtNode(n)})}},{key:"renderDOM",value:function(){var n=!0,e=!1,o=void 0;try{for(var t,r=c()(this.components);!(n=(t=r.next()).done);n=!0){var a=t.value,u=l()(a,2),b=u[0],h=u[1],C=document.getElementById(b);this.nodeList.push(C),C instanceof HTMLElement&&y.a.render(h,C)}}catch(n){e=!0,o=n}finally{try{!n&&r.return&&r.return()}finally{if(e)throw o}}}},{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,o=n.className;if("string"==typeof e){this.components.clear();var t=new G.a.Renderer;t.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"};var c=G()(e,{renderer:t,highlight:function(n){return M.a.highlightAuto(n).value}});return f.a.createElement("div",{className:o,dangerouslySetInnerHTML:{__html:c}})}return f.a.createElement("span",null)}}]),e}(f.a.Component));e.a=R},425:function(n,e){n.exports='## 复选框 Checkbox\n\n\n\n### 基本用法\n```jsx\nimport { Cell, Checkbox } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell><Checkbox>普通</Checkbox></Cell>\n        <Cell><Checkbox defaultChecked>默认选中</Checkbox></Cell>\n        <Cell><Checkbox disabled>禁用</Checkbox></Cell>\n        <Cell><Checkbox defaultChecked disabled>选中且禁用</Checkbox></Cell>\n        <Cell className="agreement-box">\n          <Checkbox id="agreement" />\n          <label htmlFor="agreement">阅读并同意<a href="/#" onClick={(e) => { e.preventDefault(); alert(\'agree it\'); }}>《XXX条款》</a>中的相关规定</label>\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 按钮样式\n```jsx\nimport { Cell, Checkbox } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell\n          description={\n            <Checkbox.Group type="button">\n              <Checkbox value="0">选项一</Checkbox>\n              <Checkbox value="1">选项二</Checkbox>\n              <Checkbox value="2">选项三</Checkbox>\n            </Checkbox.Group>\n          }\n        >\n          普通\n        </Cell>\n\n        <Cell\n          description={\n            <Checkbox.Group type="button" defaultValue={[\'0\', \'1\']}>\n              <Checkbox value="0">选项一</Checkbox>\n              <Checkbox value="1">选项二</Checkbox>\n              <Checkbox value="2">选项三</Checkbox>\n            </Checkbox.Group>\n          }\n        >\n          指定默认值\n        </Cell>\n\n        <Cell\n          description={\n            <Checkbox.Group type="button">\n              <Checkbox value="0">选项一</Checkbox>\n              <Checkbox value="1">选项二</Checkbox>\n              <Checkbox value="2" disabled>选项三</Checkbox>\n            </Checkbox.Group>\n          }\n        >\n          禁用指定项\n        </Cell>\n\n        <Cell\n          description={\n            <Checkbox.Group type="button" shape="radius">\n              <Checkbox value="0">选项一</Checkbox>\n              <Checkbox value="1">选项二</Checkbox>\n              <Checkbox value="2">选项三</Checkbox>\n            </Checkbox.Group>\n          }\n        >\n          圆角\n        </Cell>\n\n        <Cell\n          description={\n            <Checkbox.Group type="button" shape="round">\n              <Checkbox value="0">选项一</Checkbox>\n              <Checkbox value="1">选项二</Checkbox>\n              <Checkbox value="2">选项三</Checkbox>\n            </Checkbox.Group>\n          }\n        >\n          椭圆角\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 块级样式\n```jsx\nimport { Checkbox } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div className="block-box">\n        <Checkbox.Group block type="button">\n          <Checkbox value="0">选项一</Checkbox>\n          <Checkbox value="1">选项二</Checkbox>\n          <Checkbox value="2">选项三</Checkbox>\n        </Checkbox.Group>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 列表样式\n```jsx\nimport { Checkbox } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Checkbox.Group type="cell">\n          <Checkbox value="0">选项一</Checkbox>\n          <Checkbox value="1">选项二</Checkbox>\n          <Checkbox value="2" disabled>选项三（禁止选择）</Checkbox>\n        </Checkbox.Group>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 列表样式禁用状态\n```jsx\nimport { Checkbox } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Checkbox.Group disabled type="cell">\n          <Checkbox value="0">选项一</Checkbox>\n          <Checkbox value="1">选项二</Checkbox>\n          <Checkbox value="2">选项三</Checkbox>\n        </Checkbox.Group>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### API\n\n#### Checkbox\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-checkbox | | 类名前缀 |\n| className | string | | | 追加类名 |\n| checked | boolean | | | 是否选中 |\n| shape | string | | `radius`, `round` | 形状 |\n| block | boolean | false | | 是否为块级元素 |\n| type | string | | `button`, `cell` | 显示类型 |\n| defaultChecked | boolean | | | 初始是否选中 |\n| value | string &#124; number | | | 值 |\n| disabled | boolean | false | | 是否禁用 |\n| onChange | <code>(checked: boolean) => void</code> | | <code>\\(checked: boolean\\)</code> | 值变化时触发的回调函数 |\n| id | string | | | 方便外部带有for属性的label标签控制当前checkbox |\n\n#### Checkbox.Group\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-checkbox | | 类名前缀 |\n| className | string | | | 追加类名 |\n| block | boolean | false | | 是否为块级元素 |\n| shape | string | | `radius`, `round` | 形状 |\n| value | Array&lt;number &#124; string&gt; | [ ] | | 选中值 |\n| type | string | | `button`, `cell` | 显示类型 |\n| defaultValue | Array&lt;number &#124; string&gt; | [ ] | | 初始选中值 |\n| disabled | boolean | false | | 是否禁用 |\n| onChange | <code>(value: Array&lt;number &#124; string&gt;) => void</code> | noop | \\(value: Array&lt;number &#124; string&gt;\\) | 值变化时触发的回调函数 |\n| compact | boolean | false | | group内的checkbox（type="button"）是否无缝相连 |\n'},688:function(n,e,o){}}]);
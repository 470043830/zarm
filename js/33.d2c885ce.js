(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{654:function(n,e,a){"use strict";a.r(e),a.d(e,"default",function(){return p});var r=a(17),o=a.n(r),t=a(18),c=a.n(t),s=a(19),l=a.n(s),u=a(44),i=a.n(u),d=a(20),m=a.n(d),h=a(14),v=a.n(h),p=function(n){function e(){var n,r;o()(this,e);for(var t=arguments.length,s=new Array(t),u=0;u<t;u++)s[u]=arguments[u];return r=c()(this,(n=l()(e)).call.apply(n,[this].concat(s))),v()(i()(r),"document",function(){return{document:a(929),className:"search-bar-page"}}),r}return m()(e,n),e}(a(885).a)},885:function(n,e,a){"use strict";a.d(e,"a",function(){return b});var r=a(17),o=a.n(r),t=a(21),c=a.n(t),s=a(18),l=a.n(s),u=a(19),i=a.n(u),d=a(20),m=a.n(d),h=a(1),v=a.n(h),p=a(888),g=a.n(p),f=a(889),C=a.n(f),b=(a(890),a(886),function(n){function e(){return o()(this,e),l()(this,i()(e).apply(this,arguments))}return m()(e,n),c()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,a=n.className;if("string"==typeof e){var r=new g.a.Renderer;r.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'.concat(n,"</thead><tbody>").concat(e,"</tbody></table></div>")},r.code=function(n,e){var a=!(!e||!C.a.getLanguage(e))?C.a.highlight(e,n).value:n;return'<pre><code class="hljs '.concat(e,'">').concat(a,"</code></pre>")};var o=g()(e,{renderer:r});return v.a.createElement("div",{className:a,dangerouslySetInnerHTML:{__html:o}})}return v.a.createElement("span",null)}}]),e}(h.Component))},886:function(n,e,a){},929:function(n,e){n.exports="# SearchBar 搜索框\n\n\n\n## 基本用法\n```jsx\nimport { SearchBar } from 'zarm';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <SearchBar\n          showCancel={false}\n          onSubmit={(value) => {\n            console.log(`搜索内容为${value}`);\n          }}\n          onFocus={() => {\n            console.log('获取焦点');\n          }}\n          onChange={(value) => {\n            console.log(value);\n          }}\n          onBlur={() => {\n            console.log('失去焦点');\n          }}\n          onClear={() => {\n            console.log('点击了清除');\n          }}\n          onCancel={() => {\n            console.log('点击了取消');\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 始终展示取消按钮\n```jsx\nimport { SearchBar } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <SearchBar\n          showCancel\n          value={this.state.value}\n          placeholder=\"搜索\"\n          cancelText=\"取消\"\n          onChange={(value) => {\n            console.log(value);\n            this.setState({\n              value,\n            });\n          }}\n          onClear={(value) => {\n            console.log('清除了 -> ', value);\n            this.setState({\n              value: '',\n            });\n          }}\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 多形状\n```jsx\nimport { SearchBar } from 'zarm';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <SearchBar shape=\"rect\" />\n        <SearchBar shape=\"round\" />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## 手动获取焦点\n```jsx\nimport { SearchBar, Button } from 'zarm';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <SearchBar ref={(ref) => { this.manualFocus = ref; }} />\n        <div className=\"button-wrap\">\n          <Button theme=\"primary\" size=\"xs\" shape=\"radius\" onClick={() => { this.manualFocus.focus(); }}>点击获取焦点</Button>\n        </div>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n## API\n\n| 属性 | 类型 | 默认值 | 说明 |\n| :--- | :--- | :--- | :--- |\n| placeholder | string | '搜索' | 占位符 |\n| value | string | - | 值 |\n| defaultValue | string | - | 初始值 |\n| shape | string | 'radius' | 形状，可选值 `rect`, `radius`, `round` |\n| disabled | boolean | false | 是否禁用 |\n| showCancel | boolean | false | 是否一直展示取消按钮 |\n| cancelText | string | '取消' | 取消按钮显示的内容 |\n| maxLength | number | - | 输入字数上限 |\n| clearable | boolean | true | 是否提供清空输入框功能 |\n| onChange | (value?: string) => void | - | 值变化时触发的回调函数 |\n| onSubmit | (value?: string) => void | - | 提交时触发的回调函数 |\n| onFocus | () => void | - | 获取焦点时触发的回调函数 |\n| onBlur | () => void | - | 失去焦点时触发的回调函数 |\n| onClear | () => void | - | 点击清除按钮时触发的回调函数 |\n| onCancel | () => void | - | 点击取消时触发的回调函数 |\n"}}]);
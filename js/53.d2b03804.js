(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{376:function(n,e,t){"use strict";t.r(e);var o=t(4),r=t.n(o),i=t(5),a=t.n(i),l=t(2),s=t.n(l),c=t(6),u=t.n(c),d=function(n){function e(){var n,o,i,l;a()(this,e);for(var c=arguments.length,u=Array(c),d=0;d<c;d++)u[d]=arguments[d];return o=i=s()(this,(n=e.__proto__||r()(e)).call.apply(n,[this].concat(u))),i.document=function(){return{document:t(424),className:"keyboard-page"}},l=o,s()(i,l)}return u()(e,n),e}(t(394).a);e.default=d},394:function(n,e,t){"use strict";var o=t(395),r=t.n(o),i=t(396),a=t.n(i),l=t(397),s=t.n(l),c=t(4),u=t.n(c),d=t(5),p=t.n(d),v=t(7),y=t.n(v),m=t(2),h=t.n(m),f=t(6),b=t.n(f),k=t(0),g=t.n(k),C=t(55),K=t.n(C),w=t(398),D=t.n(w),_=t(399),x=t.n(_),N=(t(400),function(n){function e(n){p()(this,e);var t=h()(this,(e.__proto__||u()(e)).call(this,n));return t.nodeList=[],t.components=new s.a,t}return b()(e,n),y()(e,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){this.renderDOM()}},{key:"componentWillUnmount",value:function(){this.nodeList.forEach(function(n){K.a.unmountComponentAtNode(n)})}},{key:"renderDOM",value:function(){var n=!0,e=!1,t=void 0;try{for(var o,i=r()(this.components);!(n=(o=i.next()).done);n=!0){var l=o.value,s=a()(l,2),c=s[0],u=s[1],d=document.getElementById(c);this.nodeList.push(d),d instanceof HTMLElement&&K.a.render(u,d)}}catch(n){e=!0,t=n}finally{try{!n&&i.return&&i.return()}finally{if(e)throw t}}}},{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){this.components.clear();var o=new D.a.Renderer;o.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"};var r=D()(e,{renderer:o,highlight:function(n){return x.a.highlightAuto(n).value}});return g.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:r}})}return g.a.createElement("span",null)}}]),e}(g.a.Component));e.a=N},424:function(n,e){n.exports="## 虚拟键盘 Keyboard & KeyboardPicker\n\n\n\n### 平铺键盘 Keyboard\n```jsx\nimport { Cell, Select, Keyboard } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: 'number',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell title=\"键盘类型\">\n          <Select\n            value={this.state.type}\n            dataSource={[\n              { value: 'number', label: '数字键盘' },\n              { value: 'price', label: '金额键盘' },\n              { value: 'idcard', label: '身份证键盘' },\n            ]}\n            onOk={(selected) => {\n              this.setState({\n                type: selected.map(item => item.value)[0],\n              });\n            }}\n          />\n        </Cell>\n        <Keyboard type={this.state.type} onKeyClick={(key) => console.log(key)} />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 键盘触发器 KeyboardPicker\n```jsx\nimport { Cell, Button, KeyboardPicker, Input } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      value: '',\n    };\n  }\n\n  toggle() {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  onKeyClick(key) {\n    console.log(key);\n    if (['close', 'ok'].indexOf(key) > -1) {\n      this.toggle();\n      return;\n    }\n\n    const value = this.state.value;\n    const newValue = (key === 'delete')\n      ? value.slice(0, value.length - 1)\n      : value + key;\n\n    if (newValue !== value) {\n      this.setState({ value: newValue });\n    }\n  }\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <div>\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.toggle()}>{visible ? '关闭' : '开启'}</Button>\n          }\n        >\n          拾取器触发方式\n        </Cell>\n\n        <KeyboardPicker\n          visible={visible}\n          onKeyClick={(key) => this.onKeyClick(key)}\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### API\n\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-picker | | 类名前缀 |\n| className | string | | | 追加类名 |\n| type | 'number' &#124; 'price' &#124; 'idcard' &#124; | 'number' | | 键盘类型 |\n| onKeyClick | function | <code>(key: string) => void</code> | | 点击按键时触发的回调函数 |\n\n#### 仅 KeyboardPicker 支持的属性\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| visible | boolean | false | | 是否展示 |\n"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{390:function(n,e,t){"use strict";t.r(e);var r=t(3),o=t.n(r),a=t(4),i=t.n(a),l=t(2),s=t.n(l),u=t(5),c=t.n(u),p=function(n){function e(){var n,r,a,l;i()(this,e);for(var u=arguments.length,c=Array(u),p=0;p<u;p++)c[p]=arguments[p];return r=a=s()(this,(n=e.__proto__||o()(e)).call.apply(n,[this].concat(c))),a.document=function(){return{document:t(438),className:"stepper-page"}},l=r,s()(a,l)}return c()(e,n),e}(t(395).a);e.default=p},395:function(n,e,t){"use strict";var r=t(396),o=t.n(r),a=t(397),i=t.n(a),l=t(398),s=t.n(l),u=t(3),c=t.n(u),p=t(4),d=t.n(p),m=t(6),h=t.n(m),v=t(2),f=t.n(v),g=t(5),b=t.n(g),y=t(0),C=t.n(y),S=t(42),D=t.n(S),w=t(399),_=t.n(w),x=t(400),N=t.n(x),M=(t(401),function(n){function e(n){d()(this,e);var t=f()(this,(e.__proto__||c()(e)).call(this,n));return t.nodeList=[],t.components=new s.a,t}return b()(e,n),h()(e,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){this.renderDOM()}},{key:"componentWillUnmount",value:function(){this.nodeList.forEach(function(n){D.a.unmountComponentAtNode(n)})}},{key:"renderDOM",value:function(){var n=!0,e=!1,t=void 0;try{for(var r,a=o()(this.components);!(n=(r=a.next()).done);n=!0){var l=r.value,s=i()(l,2),u=s[0],c=s[1],p=document.getElementById(u);this.nodeList.push(p),p instanceof HTMLElement&&D.a.render(c,p)}}catch(n){e=!0,t=n}finally{try{!n&&a.return&&a.return()}finally{if(e)throw t}}}},{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){this.components.clear();var r=new _.a.Renderer;r.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"};var o=_()(e,{renderer:r,highlight:function(n){return N.a.highlightAuto(n).value}});return C.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:o}})}return C.a.createElement("span",null)}}]),e}(C.a.Component));e.a=M},438:function(n,e){n.exports='## 步进器 Stepper\n\n\n\n### 基本用法\n```jsx\nimport { Cell, Stepper } from \'zarm\';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 1,\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell\n          title="普通"\n          description={\n            <Stepper\n              value={this.state.value}\n              onChange={(value) => {\n                console.log(value);\n              }}\n            />\n          }\n        />\n\n        <Cell\n          title="设置默认值"\n          description={\n            <Stepper defaultValue={2} />\n          }\n        />\n\n        <Cell\n          title="设置上下限"\n          description={\n            <Stepper min={-3} max={3} />\n          }\n        />\n\n        <Cell\n          title="设置步长"\n          description={\n            <Stepper step={0.5} />\n          }\n        />\n\n        <Cell\n          title="禁用状态"\n          description={\n            <Stepper disabled />\n          }\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 多形状\n```jsx\nimport { Cell, Stepper } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell\n          title="圆角"\n          description={\n            <Stepper shape="radius" />\n          }\n        />\n\n        <Cell\n          title="圆形"\n          description={\n            <Stepper shape="circle" />\n          }\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### API\n\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-stepper | | 类名前缀 |\n| className | string | | | 追加类名 |\n| theme | string | `primary` | `default`, `primary`, `info`, `success`, `warning`, `error` | 主题 |\n| shape | string | | `radius`, `circle` | 形状 |\n| value | number | | | 值 |\n| defaultValue | number | | | 初始值 |\n| min | number | | | 最小值 |\n| max | number | | | 最大值 |\n| step | number | 1 | | 步长 |\n| disabled | boolean | false | | 是否禁用 |\n| onInputChange | <code>(value: number) => void</code> | noop | \\(value: number\\) | 输入值变化时触发的回调函数 |\n| onChange | <code>(value: number) => void</code> | noop | \\(value: number\\) | 值变化时触发的回调函数 |\n'}}]);
{"version":3,"sources":["webpack:///./components/date-picker/demo.md"],"names":[],"mappings":"2FAAA,OAAe","file":"js/42.ed512b6b.js","sourcesContent":["export default \"# DatePicker 日期选择器\\n\\n\\n\\n## 基本用法\\n```jsx\\nimport { Cell, Button, DatePicker, Toast } from 'zarm';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      date: {\\n        visible: false,\\n        value: '',\\n        wheelDefaultValue: '2018-09-13',\\n      },\\n      time: {\\n        visible: false,\\n        value: '',\\n      },\\n      limitDate: {\\n        visible: false,\\n        value: '2017-09-13',\\n      },\\n      specDOM: {\\n        visible: false,\\n        value: '',\\n      }\\n    };\\n\\n    this.myRef = React.createRef();\\n  }\\n\\n  componentDidMount() {\\n    // this.interval = setInterval(\\n    //   () =>\\n    //     this.setState(prevState => ({\\n    //       count: prevState.count + 1\\n    //     })),\\n    //   1000\\n    // );\\n  }\\n\\n  toggle(key) {\\n    const state = this.state[key];\\n    state.visible = !state.visible;\\n    this.setState({ [`${key}`]: state });\\n  }\\n\\n  render() {\\n    const {\\n      date,\\n      time,\\n      limitDate,\\n      specDOM,\\n    } = this.state;\\n\\n    return (\\n      <div>\\n        <Cell\\n          description={\\n            <Button size=\\\"xs\\\" onClick={() => this.toggle('date')}>选择</Button>\\n          }\\n        >\\n          选择日期\\n        </Cell>\\n\\n        <Cell\\n          description={\\n            <Button size=\\\"xs\\\" onClick={() => this.toggle('time')}>选择</Button>\\n          }\\n        >\\n          选择时间\\n        </Cell>\\n\\n        <Cell\\n          description={\\n            <Button size=\\\"xs\\\" onClick={() => this.toggle('limitDate')}>选择</Button>\\n          }\\n        >\\n          选择日期(自定义)\\n        </Cell>\\n\\n        <Cell\\n          description={\\n            <Button size=\\\"xs\\\" onClick={() => this.toggle('specDOM')}>选择</Button>\\n          }\\n        >\\n          挂载到指定dom节点\\n        </Cell>\\n\\n        <DatePicker\\n          visible={date.visible}\\n          mode=\\\"date\\\"\\n          value={date.value}\\n          wheelDefaultValue={date.wheelDefaultValue}\\n          onOk={(value) => {\\n            this.setState({\\n              date: {\\n                visible: false,\\n                value,\\n              },\\n            });\\n            Toast.show(JSON.stringify(value));\\n          }}\\n          onCancel={() => this.toggle('date')}\\n        />\\n\\n        <DatePicker\\n          visible={time.visible}\\n          mode=\\\"time\\\"\\n          value={time.value}\\n          onOk={(value) => {\\n            this.setState({\\n              time: {\\n                visible: false,\\n                value,\\n              },\\n            });\\n            Toast.show(JSON.stringify(value));\\n          }}\\n          onCancel={() => this.toggle('time')}\\n        />\\n\\n        <DatePicker\\n          visible={limitDate.visible}\\n          title=\\\"选择日期\\\"\\n          okText=\\\"确定\\\"\\n          cancelText=\\\"取消\\\"\\n          mode=\\\"date\\\"\\n          min=\\\"2007-01-03\\\"\\n          max=\\\"2019-11-23\\\"\\n          value={limitDate.value}\\n          onOk={(value) => {\\n            this.setState({\\n              limitDate: {\\n                visible: false,\\n                value,\\n              },\\n            });\\n            Toast.show(JSON.stringify(value));\\n          }}\\n          onCancel={() => this.toggle('limitDate')}\\n        />\\n\\n        <DatePicker\\n          visible={specDOM.visible}\\n          value={specDOM.value}\\n          onOk={(value) => {\\n            this.setState({\\n              specDOM: {\\n                visible: false,\\n                value,\\n              },\\n            });\\n            Toast.show(JSON.stringify(value));\\n          }}\\n          onCancel={() => this.toggle('specDOM')}\\n          getContainer={() => this.myRef.current}\\n        />\\n\\n        <div\\n          id=\\\"test-div\\\"\\n          style={{ position: 'relative', zIndex: 1 }}\\n          ref={this.myRef} \\n          />\\n      </div>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## DateSelect 表单日期选择器\\n```jsx\\nimport { Cell, DateSelect, Icon } from 'zarm';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      value: \\\"\\\",\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <Cell title=\\\"日期选择\\\">\\n          <DateSelect\\n            title=\\\"选择日期\\\"\\n            placeholder=\\\"请选择日期\\\"\\n            mode=\\\"date\\\"\\n            min=\\\"1974-05-16\\\"\\n            max=\\\"2027-05-15\\\"\\n            value={this.state.value}\\n            onOk={(value) => {\\n              console.log('DateSelect onOk: ', value);\\n              this.setState({\\n                value,\\n              });\\n            }}\\n          />\\n        </Cell>\\n      </div>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## DatePickerView 平铺选择器\\n```jsx\\nimport { DatePickerView } from 'zarm';\\n\\nclass Demo extends React.Component {\\n  constructor() {\\n    super();\\n    this.state = {\\n      value: \\\"\\\",\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <DatePickerView\\n          mode=\\\"datetime\\\"\\n          value={this.state.value}\\n          min=\\\"2018-1-13\\\"\\n          onChange={(value) => {\\n            console.log('datePickerView => ', value);\\n          }}\\n        />\\n      </div>\\n    )\\n  }\\n}\\n\\nReactDOM.render(<Demo />, mountNode);\\n```\\n\\n\\n\\n## API\\n\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| value | string \\\\| Date | - | 值 |\\n| defaultValue | string \\\\| Date | - | 初始值 |\\n| mode | string | 'date' | 指定日期选择模式，可选项 `year`, `month`, `date`, `time`, `datetime` |\\n| min | string | - | 相应mode的最小时间 |\\n| max | string | - | 相应mode的最大时间 |\\n| minuteStep | number | 1 | 分钟间隔 |\\n| disabled | boolean | false | 是否禁用 |\\n| onChange | (value?: Date) => void | - | 值变化时触发的回调函数 |\\n\\n### 仅 DatePicker & DateSelect 支持的属性\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| visible | boolean | false | 是否展示 |\\n| title | string | '请选择' | 选择器标题 |\\n| cancelText | string | '取消' | 取消栏文字 |\\n| okText | string | '确定' | 确定栏文字 |\\n| maskClosable | boolean | true | 是否点击遮罩层时关闭，需要和onCancel一起使用 |\\n| wheelDefaultValue | string \\\\| Date | - | 滚轮默认停留的日期位置 |\\n| onOk | (value?: Date) => void | - | 点击确定时触发的回调函数 | \\n| onCancel | () => void | - | 点击取消时触发的回调函数 |\\n| getContainer | HTMLElement &#124; () => HTMLElement | document.body | 指定 DatePicker 挂载的 HTML 节点 |\\n\\n### 仅 DateSelect 支持的属性\\n| 属性 | 类型 | 默认值 | 说明 |\\n| :--- | :--- | :--- | :--- |\\n| placeholder | string | '请选择' | 输入提示信息 |\\n| hasArrow | boolean | true | 是否显示箭头 |\\n| format | string | - | 格式化显示值。例：format=\\\"yyyy年MM月dd日\\\"<br /> 年:`yyyy`, 月:`MM`, 日:`dd`, 时:`hh`, 分:`mm`。 |\\n\""],"sourceRoot":""}
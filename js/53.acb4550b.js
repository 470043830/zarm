(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{385:function(n,e,t){"use strict";t.r(e);var r=t(3),a=t.n(r),o=t(4),i=t.n(o),s=t(2),l=t.n(s),c=t(5),u=t.n(c),d=function(n){function e(){var n,r,o,s;i()(this,e);for(var c=arguments.length,u=Array(c),d=0;d<c;d++)u[d]=arguments[d];return r=o=l()(this,(n=e.__proto__||a()(e)).call.apply(n,[this].concat(u))),o.document=function(){return{document:t(430),className:"keyboard-page"}},s=r,l()(o,s)}return u()(e,n),e}(t(403).a);e.default=d},403:function(n,e,t){"use strict";var r=t(3),a=t.n(r),o=t(4),i=t.n(o),s=t(6),l=t.n(s),c=t(2),u=t.n(c),d=t(5),p=t.n(d),y=t(0),v=t.n(y),m=t(404),b=t.n(m),h=t(405),k=t.n(h),g=(t(406),function(n){function e(){return i()(this,e),u()(this,(e.__proto__||a()(e)).apply(this,arguments))}return p()(e,n),l()(e,[{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){var r=new b.a.Renderer;r.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"},r.code=function(n,e){return'<pre><code class="hljs '+e+'">'+(!(!e||!k.a.getLanguage(e))?k.a.highlight(e,n).value:n)+"</code></pre>"},b.a.setOptions({renderer:r});var a=b()(e,{renderer:r});return v.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:a}})}return v.a.createElement("span",null)}}]),e}(v.a.Component));e.a=g},430:function(n,e){n.exports="## 虚拟键盘 Keyboard & KeyboardPicker\n\n\n\n### 平铺键盘 Keyboard\n```jsx\nimport { Cell, Select, Keyboard } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: 'number',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell title=\"键盘类型\">\n          <Select\n            value={this.state.type}\n            dataSource={[\n              { value: 'number', label: '数字键盘' },\n              { value: 'price', label: '金额键盘' },\n              { value: 'idcard', label: '身份证键盘' },\n            ]}\n            onOk={(selected) => {\n              this.setState({\n                type: selected.map(item => item.value)[0],\n              });\n            }}\n          />\n        </Cell>\n        <Keyboard type={this.state.type} onKeyClick={(key) => console.log(key)} />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 键盘触发器 KeyboardPicker\n```jsx\nimport { Cell, Button, KeyboardPicker, Input } from 'zarm';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n      value: '',\n    };\n  }\n\n  toggle() {\n    this.setState({ visible: !this.state.visible });\n  }\n\n  onKeyClick(key) {\n    console.log(key);\n    if (['close', 'ok'].indexOf(key) > -1) {\n      this.toggle();\n      return;\n    }\n\n    const value = this.state.value;\n    const newValue = (key === 'delete')\n      ? value.slice(0, value.length - 1)\n      : value + key;\n\n    if (newValue !== value) {\n      this.setState({ value: newValue });\n    }\n  }\n\n  render() {\n    const { visible } = this.state;\n    return (\n      <div>\n        <Cell\n          description={\n            <Button size=\"xs\" onClick={() => this.toggle()}>{visible ? '关闭' : '开启'}</Button>\n          }\n        >\n          拾取器触发方式\n        </Cell>\n\n        <KeyboardPicker\n          visible={visible}\n          onKeyClick={(key) => this.onKeyClick(key)}\n        />\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### API\n\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-picker | | 类名前缀 |\n| className | string | | | 追加类名 |\n| type | 'number' &#124; 'price' &#124; 'idcard' &#124; | 'number' | | 键盘类型 |\n| onKeyClick | function | <code>(key: string) => void</code> | | 点击按键时触发的回调函数 |\n\n#### 仅 KeyboardPicker 支持的属性\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| visible | boolean | false | | 是否展示 |\n"}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{378:function(n,e,t){"use strict";t.r(e);var o=t(4),a=t.n(o),r=t(5),s=t.n(r),i=t(2),c=t.n(i),u=t(6),l=t.n(u),d=t(397),m=(t(529),function(n){function e(){var n,o,r,i;s()(this,e);for(var u=arguments.length,l=Array(u),d=0;d<u;d++)l[d]=arguments[d];return o=r=c()(this,(n=e.__proto__||a()(e)).call.apply(n,[this].concat(l))),r.document=function(){return{document:t(434),className:"pull-page"}},i=o,c()(r,i)}return l()(e,n),e}(d.a));e.default=m},397:function(n,e,t){"use strict";var o=t(391),a=t.n(o),r=t(392),s=t.n(r),i=t(393),c=t.n(i),u=t(4),l=t.n(u),d=t(5),m=t.n(d),h=t(7),p=t.n(h),f=t(2),v=t.n(f),g=t(6),S=t.n(g),E=t(0),T=t.n(E),A=t(55),_=t.n(A),R=t(394),y=t.n(R),N=t(395),D=t(1),L=t.n(D),k=t(399),C=t.n(k),O=(t(404),t(405),t(406),t(407),function(n){function e(){return m()(this,e),v()(this,(e.__proto__||l()(e)).apply(this,arguments))}return S()(e,n),p()(e,[{key:"componentDidMount",value:function(){var n=this,e=this.props,t=e.onChange,o=e.value;this.cm=C()(this.editor,{mode:"jsx",theme:"react",keyMap:"sublime",viewportMargin:1/0,lineNumbers:!1,dragDrop:!1}),this.cm.setValue(o),this.cm.on("changes",function(e){t&&(clearTimeout(n.timeout),n.timeout=setTimeout(function(){t(e.getValue())},300))})}},{key:"render",value:function(){var n=this;return T.a.createElement("div",{className:"editor",ref:function(e){n.editor=e}})}}]),e}(E.Component)),M=O;O.propTypes={onChange:L.a.func,value:L.a.string},O.defaultProps={onChange:function(){},value:""};t(396);var w=function(n){function e(n){m()(this,e);var t=v()(this,(e.__proto__||l()(e)).call(this,n));return t.toggleShowCode=function(){t.setState({isOpen:!t.state.isOpen})},t.containerId=""+parseInt(1e9*Math.random(),10).toString(36),t.document=t.props.children.match(/([^]*)\n?(```[^]+```)/),t.title=String(t.document[1]),t.source=t.document[2].match(/```(.*)\n?([^]+)```/),t.state={isOpen:!1},t}return S()(e,n),p()(e,[{key:"componentDidMount",value:function(){this.renderSource(this.source[2])}},{key:"componentWillUnmount",value:function(){this.containerElem&&_.a.unmountComponentAtNode(this.containerElem)}},{key:"renderSource",value:function(n){var e=this;Promise.all([t.e(6),t.e(7),t.e(72)]).then(t.bind(null,544)).then(function(n){return{args:["context","React","ReactDOM","zarm"],argv:[e,T.a,_.a,n]}}).then(function(t){var o=t.args;t.argv;n=n.replace(/import\s+\{\s+(.*)\s+\}\s+from\s+'zarm';/,"const { $1 } = zarm;").replace("mountNode","document.getElementById('"+e.containerId+"')");var a=Object(N.transform)(n,{presets:["es2015","react"]}).code;o.push(a),e.source[2]=n}).catch(function(n){0})}},{key:"render",value:function(){var n=this;return T.a.createElement("div",null,T.a.createElement("h3",null,this.title),T.a.createElement("div",{className:"demo"},T.a.createElement("div",{className:"demo-code"},T.a.createElement("div",{className:"demo-code-editor",ref:function(e){n.code=e},dangerouslySetInnerHTML:{__html:this.description}}),T.a.createElement(M,{value:this.source[2],onChange:function(e){return n.renderSource(e)}}))))}}]),e}(E.Component),H=function(n){function e(n){m()(this,e);var t=v()(this,(e.__proto__||l()(e)).call(this,n));return t.nodeList=[],t.components=new c.a,t.renderer=new y.a.Renderer,t}return S()(e,n),p()(e,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){this.renderDOM()}},{key:"componentWillUnmount",value:function(){this.nodeList.forEach(function(n){_.a.unmountComponentAtNode(n)})}},{key:"renderDOM",value:function(){var n=!0,e=!1,t=void 0;try{for(var o,r=a()(this.components);!(n=(o=r.next()).done);n=!0){var i=o.value,c=s()(i,2),u=c[0],l=c[1],d=document.getElementById(u);this.nodeList.push(d),d instanceof HTMLElement&&_.a.render(l,d)}}catch(n){e=!0,t=n}finally{try{!n&&r.return&&r.return()}finally{if(e)throw t}}}},{key:"render",value:function(){var n=this,e=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),t=e.document,o=e.className;if("string"==typeof t){this.components.clear();var a=y()(t.replace(/:::\s?api\s?([^]+?):::/g,function(n,e){return e}).replace(/:::\s?demo\s?([^]+?):::/g,function(e,t,o){var a=o.toString(36);return n.components.set(a,T.a.createElement(w,n.props,t)),"<div id="+a+"></div>"}),{renderer:this.renderer});return T.a.createElement("div",{className:o,dangerouslySetInnerHTML:{__html:a}})}return T.a.createElement("span",null)}}]),e}(T.a.Component);e.a=H},434:function(n,e){n.exports="## 上拉加载下拉刷新 Pull\n\n:::demo 基本用法\n```jsx\nimport { Pull, Cell } from 'zarm';\n\nconst REFRESH_STATE = {\n  normal: 0,  // 普通\n  pull: 1,    // 下拉刷新（未满足刷新条件）\n  drop: 2,    // 释放立即刷新（满足刷新条件）\n  loading: 3, // 加载中\n  success: 4, // 加载成功\n  failure: 5, // 加载失败\n};\n\nconst LOAD_STATE = {\n  normal: 0,   // 普通\n  abort: 1,    // 中止\n  loading: 2,  // 加载中\n  success: 3,  // 加载成功\n  failure: 4,  // 加载失败\n  complete: 5, // 加载完成（无新数据）\n};\n\nfunction getRandomNum(min, max) {\n  const Range = max - min;\n  const Rand = Math.random();\n  return (min + Math.round(Rand * Range));\n}\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mounted = true;\n    this.state = {\n      customRefreshing: REFRESH_STATE.normal,\n      customLoading: LOAD_STATE.normal,\n      dataSource: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchData('customRefreshing');\n  }\n\n  componentWillUnmount() {\n    this.mounted = false;\n  }\n\n  // 模拟请求数据\n  fetchData(key) {\n    this.setState({ [`${key}`]: REFRESH_STATE.loading });\n    setTimeout(() => {\n      if (!this.mounted) return;\n\n      const dataSource = [];\n      const { length } = dataSource;\n\n      for (let i = length; i < length + 20; i++) {\n        dataSource.push(<Cell key={+i}>第 {i + 1} 行</Cell>);\n      }\n\n      this.setState({\n        dataSource,\n        [`${key}`]: REFRESH_STATE.success,\n      });\n    }, 2000);\n  }\n\n  // 模拟加载更多数据\n  loadData() {\n    this.setState({ customLoading: LOAD_STATE.loading });\n    setTimeout(() => {\n      if (!this.mounted) return;\n\n      const randomNum = getRandomNum(0, 5);\n      const { dataSource } = this.state;\n      let customLoading = LOAD_STATE.success;\n\n      // eslint-disable-next-line\n      console.log(`状态: ${randomNum === 0 ? '失败' : (randomNum === 1 ? '完成' : '成功')}`);\n\n      if (randomNum === 0) {\n        customLoading = LOAD_STATE.failure;\n      } else if (randomNum === 1) {\n        customLoading = LOAD_STATE.complete;\n      } else {\n        const newLength = 5;\n        const startIndex = dataSource.length;\n        for (let i = startIndex; i < startIndex + newLength; i++) {\n          dataSource.push(<Cell key={+i}>第 {i + 1} 行</Cell>);\n        }\n      }\n\n      this.setState({\n        dataSource,\n        customLoading,\n      });\n    }, 2000);\n  }\n\n  render() {\n    const { customRefreshing, customLoading, dataSource } = this.state;\n\n    const itemsRender = [];\n    for (let i = 0; i < 3; i++) {\n      itemsRender.push(<Cell key={+i}>第 {i + 1} 行</Cell>);\n    }\n\n    return (\n      <div>\n        <Pull\n          refresh={{\n            state: customRefreshing,\n            handler: () => this.fetchData('customRefreshing'),\n            // render: (refreshState, percent) => {\n            //   const cls = 'custom-control';\n            //   switch (refreshState) {\n            //     case REFRESH_STATE.pull:\n            //       return <div className={cls} style={{ transform: `scale(${percent / 100})` }}><img src={logo} alt=\"\" /></div>;\n\n            //     case REFRESH_STATE.drop:\n            //       return <div className={`${cls} rotate360`}><img src={logo} alt=\"\" /></div>;\n\n            //     case REFRESH_STATE.loading:\n            //       return <div className={cls}><ActivityIndicator className=\"rotate360\" /></div>;\n\n            //     case REFRESH_STATE.success:\n            //       return <div className={cls}>加载成功</div>;\n\n            //     case REFRESH_STATE.failure:\n            //       return <div className={cls}>加载失败</div>;\n            //   }\n            // },\n          }}\n          load={{\n            state: customLoading,\n            handler: () => this.loadData(),\n            // render: (loadState) => {\n            //   const cls = 'custom-control';\n            //   switch (loadState) {\n            //     case LOAD_STATE.loading:\n            //       return <div className={cls}><ActivityIndicator className=\"rotate360\" /></div>;\n\n            //     case LOAD_STATE.failure:\n            //       return <div className={cls}>加载失败</div>;\n\n            //     case LOAD_STATE.complete:\n            //       return <div className={cls}>我是有底线的</div>;\n            //   }\n            // },\n          }}\n        >\n          {dataSource}\n        </Pull>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n:::\n\n\n:::api API\n\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-pull | | 类名前缀 |\n| className | string | | | 追加类名 |\n| refresh | Action | | | 下拉刷新的参数配置 |\n| load | Action |  | | 上拉加载的参数配置 |\n| animationDuration | number | 400 | | 动画执行时间，单位：毫秒 |\n| stayTime | number | 1000 | | 加载成功停留时间 |\n\n#### Action 类型定义\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| state | REFRESH_STATE &#124; LOAD_STATE | 0 | | 状态枚举 |\n| startDistance | number | 20 | | 下拉时的助跑距离 |\n| distance | number | 50 | | 触发距离阀值 |\n| render | <code>(refreshState: REFRESH_STATE &#124; LOAD_STATE, percent: number) => any</code> | | | 各状态渲染的回调函数 |\n| handler | <code>() => void</code> | | | 达到阀值后释放触发的回调函数 |\n\n:::"},529:function(n,e,t){}}]);
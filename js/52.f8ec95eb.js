(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{375:function(n,e,t){"use strict";t.r(e);var o=t(4),r=t.n(o),l=t(5),a=t.n(l),u=t(2),s=t.n(u),i=t(6),c=t.n(i),p=function(n){function e(){var n,o,l,u;a()(this,e);for(var i=arguments.length,c=Array(i),p=0;p<i;p++)c[p]=arguments[p];return o=l=s()(this,(n=e.__proto__||r()(e)).call.apply(n,[this].concat(c))),l.document=function(){return{document:t(423),className:"input-page"}},u=o,s()(l,u)}return c()(e,n),e}(t(394).a);e.default=p},394:function(n,e,t){"use strict";var o=t(395),r=t.n(o),l=t(396),a=t.n(l),u=t(397),s=t.n(u),i=t(4),c=t.n(i),p=t(5),d=t.n(p),m=t(7),h=t.n(m),f=t(2),v=t.n(f),C=t(6),g=t.n(C),y=t(0),x=t.n(y),b=t(55),I=t.n(b),D=t(398),w=t.n(D),N=t(399),L=t.n(N),M=(t(400),function(n){function e(n){d()(this,e);var t=v()(this,(e.__proto__||c()(e)).call(this,n));return t.nodeList=[],t.components=new s.a,t}return g()(e,n),h()(e,[{key:"componentDidMount",value:function(){this.renderDOM()}},{key:"componentDidUpdate",value:function(){this.renderDOM()}},{key:"componentWillUnmount",value:function(){this.nodeList.forEach(function(n){I.a.unmountComponentAtNode(n)})}},{key:"renderDOM",value:function(){var n=!0,e=!1,t=void 0;try{for(var o,l=r()(this.components);!(n=(o=l.next()).done);n=!0){var u=o.value,s=a()(u,2),i=s[0],c=s[1],p=document.getElementById(i);this.nodeList.push(p),p instanceof HTMLElement&&I.a.render(c,p)}}catch(n){e=!0,t=n}finally{try{!n&&l.return&&l.return()}finally{if(e)throw t}}}},{key:"render",value:function(){var n=this.document(localStorage.getItem("LANGUAGE")||"zh-CN"),e=n.document,t=n.className;if("string"==typeof e){this.components.clear();var o=new w.a.Renderer;o.table=function(n,e){return'<div class="grid-container"><table class="grid"><thead>'+n+"</thead><tbody>"+e+"</tbody></table></div>"};var r=w()(e,{renderer:o,highlight:function(n){return L.a.highlightAuto(n).value}});return x.a.createElement("div",{className:t,dangerouslySetInnerHTML:{__html:r}})}return x.a.createElement("span",null)}}]),e}(x.a.Component));e.a=M},423:function(n,e){n.exports='## 文本框 Input\n\n### 基本用法\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      inputValue: \'\',\n    }\n  }\n  handleInputChange(value) {\n    this.setState({\n      inputValue: value,\n    })\n  }\n  render() {\n    return (\n      <div>\n        <Cell title="单行文本">\n          <Input\n            type="text"\n            placeholder="请输入"\n            value={this.state.inputValue}\n            onChange={this.handleInputChange.bind(this)}\n            />\n        </Cell>\n        <Cell title="多行文本"><Input type="text" rows={3} placeholder="请输入" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n### 输入类型\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      focused: false,\n      number: \'\',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <Cell title="数字">\n          <Input\n            ref={(ref) => { this.manualFocus = ref; }}\n            type="number"\n            placeholder="type is number"\n            value={this.state.number}\n            focused={this.state.focused}\n            onFocus={value => console.log(`onFocus: ${value}`)}\n            onBlur={value => console.log(`onBlur: ${value}`)}\n          />\n        </Cell>\n\n        <Cell title="金额">\n          <Input type="price" placeholder="type is price" />\n        </Cell>\n\n        <Cell title="身份证">\n          <Input type="idcard" placeholder="type is idcard" />\n        </Cell>\n\n        <Cell>\n          <button onClick={() => this.manualFocus.focus()}>click to focus the first input</button>\n        </Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 高度自适应\n\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell title="多行文本"><Input autoHeight type="text" rows={3} placeholder="写点啥..." /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 无标签栏\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell><Input type="text" placeholder="标题" /></Cell>\n        <Cell><Input autoHeight type="text" rows={4} maxLength={200} placeholder="摘要" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### 显示输入字数\n```jsx\nimport { Input, Cell } from \'zarm\';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Cell><Input autoHeight showLength type="text" rows={4} maxLength={200} placeholder="摘要" /></Cell>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(<Demo />, mountNode);\n```\n\n\n\n### API\n\n| 属性 | 类型 | 默认值 | 可选值／参数 | 说明 |\n| :--- | :--- | :--- | :--- | :--- |\n| prefixCls | string | za-input | | 类名前缀 |\n| className | string | | | 追加类名 |\n| type | string | `text` | `text`, `textarea` | 类型 |\n| value | string |  | | 值 |\n| defaultValue | string |  | | 初始值 |\n| disabled | boolean | false | | 是否禁用 |\n| rows | number | | | 多行文本时的显示行数。type为textarea类型时有效。 |\n| autoHeight | boolean | false | | 是否高度自适应 |\n| maxLength | number | | | 输入字数上限 |\n| showLength | boolean | false | | 是否显示输入字数。type为textarea类型时有效。 |\n| clearable | boolean | true | | 是否显示清除按钮。type不为textarea类型时有效。必须为受控组件（属性包含value、onChange）时方可生效。 |\n| onChange | <code>(value: string) => void</code> | noop | \\(value: string\\) | 值变化时触发的回调函数 |\n\n'}}]);